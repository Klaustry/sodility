
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

 contract nftPatents {

    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    struct Patent {
        string name;
        string number;
        string patent_description;
        string url_patent;
        uint price;
    }

    Patent[] patents;
    mapping (uint => uint) patentOwner;
    mapping (string => bool) patentExist;

    function createPatent (
        string name, 
        string number,
        string patent_description, 
        string url_patent,
        uint price) public checkNameExist(name) 
            {
                patents.push(Patent(name, number, patent_description, url_patent, price));
                uint lastKey = patents.length - 1;
                patentOwner[lastKey] = msg.pubkey();
    }

    function getPatentInfo(uint id) public 
        view returns(string name, 
            string number,
            string patent_description, 
            string url_patent,uint price)
            {
                tvm.accept();
                name = patents[id].name;
                number = patents[id].number;
                patent_description = patents[id].patent_description;
                if(msg.pubkey() == patentOwner[id]) url_patent = patents[id].url_patent;
                    else url_patent = "This info only owner access!";
                if(patents[id].price > 0) price = patents[id].price; 
    }

    // function sellPatent(uint id,uint pubKeyOfNewOwner) public checkOwner(id) {
    //     patentOwner[id] = pubKeyOfNewOwner;
    // }

    function updatePatentPrice(uint id,uint price) public checkOwner(id) {
        patents[id].price = price;
    }
    
    modifier checkOwner(uint id) {
        require(msg.pubkey() == patentOwner[id], 100);
		tvm.accept();
		_;
	}
    
    modifier checkNameExist(string name) {
        require(!(patentExist[name] ==  true), 101);
        patentExist[name] = true;
		tvm.accept();
		_;
	}
}
